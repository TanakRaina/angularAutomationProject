'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var querystring = require('querystring');

exports.getPathTo = function (pathOrRequest, request) {
  var path = this.$.path;

  var query = this.$.params ? '?' + querystring.stringify(this.$.params) : '';
  var params = void 0;

  if (typeof pathOrRequest === 'string') {
    if (request && (typeof request === 'undefined' ? 'undefined' : _typeof(request)) === 'object') {
      params = joinQueryStrings(query, querystring.stringify(request));
      path = [this.$.path, pathOrRequest].join('/') + params;
    } else {
      path = [this.$.path, pathOrRequest].join('/') + query;
    }
  } else if ((typeof pathOrRequest === 'undefined' ? 'undefined' : _typeof(pathOrRequest)) === 'object') {
    params = joinQueryStrings(query, querystring.stringify(pathOrRequest));
    path = this.$.path + params;
  }

  return path;
};

/**
 * @ignore
 * @method joinQueryStrings
 *
 * @param {String} qs1
 * @param {String} qs2
 * @return {String}
 */
function joinQueryStrings(qs1, qs2) {
  var strip = function strip(string) {
    return string.replace(/(^\?)/, '').replace(/(^&)/, '');
  };

  qs1 = strip(qs1);
  qs2 = strip(qs2);
  var joined = [qs1, qs2].join('&');
  return qs1 ? '?' + joined : '?' + qs2;
}

exports.static = function (scope) {
  for (var name in exports) {
    scope[name] = exports[name];
  }
};